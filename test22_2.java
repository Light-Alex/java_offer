/**
 * 题目：整数中1出现的次数（从1到n整数中1出现的次数）
 * 求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
 * 为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。
 * ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
 */

/**
 * 方法二：
 * 十进制N，
 * 如果要计算1出现的次数受三方面的影响：百位上的数字、百位以上(高位)的数字、百位以下(低位)的数字
 * 例如: 
 * 12013, 百位上的数字为0，则百位上可能出现1的情况有：100~199、1100~1199、2100~2199、...、9100~9199、10100~10199、11100~11199, 共 12(高位数字)*100(位数) 个
 * 12113，百位上的数字为1，则百位上可能出现1的情况有：100~199、1100~1199、2100~2199、...、9100~9199、10100~10199、11100~11199，12100~12113，共 12(高位数字)*100(位数) + 13(低位数字) + 1 个
 * 12313, 百位上的数字>1，则百位上可能出现1的情况有：100~199、1100~1199、2100~2199、...、9100~9199、10100~10199、11100~11199、12100~12199, 共 (12(高位数字) + 1) * 100(位数)
 * 按照以上方法计算 N 在 个位 十位 百位...上出现1的数目，将这些数目加起来即为1~N中1出现的次数
 */
public class test22_2 {
    public static void main(String[] args) {
        int n = 13;
        test22_2 t = new test22_2();
        System.out.println(t.NumberOf1Between1AndN_Solution(n));
    }

    public int NumberOf1Between1AndN_Solution(int n) {
        
        // 当前位数
        int current = 0;

        // 高位数
        int before = 0;

        // 低位数
        int after = 0;

        // 1~N 中 1 出现的次数
        int count = 0;

        int i = 1;

        while(n / i != 0){

            current = n % (10 * i) / i;

            before = n / (10 * i);

            after = n - (before * (10 * i) + current * i);

            // 当前位为0，当前位上出现1的数字数目由高位决定：高位 * 位数
            if(current == 0){
                count += before * i;
            }else if(current == 1){
                count += before * i + after + 1;
            }else{
                count += (before + 1) * i;
            }

            i = i * 10;
        }
        return count;
    }
}